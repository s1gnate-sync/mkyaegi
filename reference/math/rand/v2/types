type ChaCha8 struct {
	// Has unexported fields.
}
func NewChaCha8(seed [32]byte) *ChaCha8
func (c *ChaCha8) MarshalBinary() ([]byte, error)
func (c *ChaCha8) Read(p []byte) (n int, err error)
func (c *ChaCha8) Seed(seed [32]byte)
func (c *ChaCha8) Uint64() uint64
func (c *ChaCha8) UnmarshalBinary(data []byte) error
type PCG struct {
	// Has unexported fields.
}
func NewPCG(seed1, seed2 uint64) *PCG
func (p *PCG) MarshalBinary() ([]byte, error)
func (p *PCG) Seed(seed1, seed2 uint64)
func (p *PCG) Uint64() uint64
func (p *PCG) UnmarshalBinary(data []byte) error
type Rand struct {
	// Has unexported fields.
}
func New(src Source) *Rand
func (r *Rand) ExpFloat64() float64
func (r *Rand) Float32() float32
func (r *Rand) Float64() float64
func (r *Rand) Int() int
func (r *Rand) Int32() int32
func (r *Rand) Int32N(n int32) int32
func (r *Rand) Int64() int64
func (r *Rand) Int64N(n int64) int64
func (r *Rand) IntN(n int) int
func (r *Rand) NormFloat64() float64
func (r *Rand) Perm(n int) []int
func (r *Rand) Shuffle(n int, swap func(i, j int))
func (r *Rand) Uint() uint
func (r *Rand) Uint32() uint32
func (r *Rand) Uint32N(n uint32) uint32
func (r *Rand) Uint64() uint64
func (r *Rand) Uint64N(n uint64) uint64
func (r *Rand) UintN(n uint) uint
type Source interface {
	Uint64() uint64
}
type Zipf struct {
	// Has unexported fields.
}
func NewZipf(r *Rand, s float64, v float64, imax uint64) *Zipf
