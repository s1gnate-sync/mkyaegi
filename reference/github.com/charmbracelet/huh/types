type Accessor[T any] interface {
	Get() T
	Set(value T)
}
type Confirm struct {
	// Has unexported fields.
}
func NewConfirm() *Confirm
func (c *Confirm) Accessor(accessor Accessor[bool]) *Confirm
func (c *Confirm) Affirmative(affirmative string) *Confirm
func (c *Confirm) Blur() tea.Cmd
func (c *Confirm) Description(description string) *Confirm
func (c *Confirm) DescriptionFunc(f func() string, bindings any) *Confirm
func (c *Confirm) Error() error
func (c *Confirm) Focus() tea.Cmd
func (c *Confirm) GetKey() string
func (c *Confirm) GetValue() any
func (c *Confirm) Init() tea.Cmd
func (c *Confirm) Inline(inline bool) *Confirm
func (c *Confirm) Key(key string) *Confirm
func (c *Confirm) KeyBinds() []key.Binding
func (c *Confirm) Negative(negative string) *Confirm
func (c *Confirm) Run() error
func (*Confirm) Skip() bool
func (c *Confirm) String() string
func (c *Confirm) Title(title string) *Confirm
func (c *Confirm) TitleFunc(f func() string, bindings any) *Confirm
func (c *Confirm) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (c *Confirm) Validate(validate func(bool) error) *Confirm
func (c *Confirm) Value(value *bool) *Confirm
func (c *Confirm) View() string
func (c *Confirm) WithAccessible(accessible bool) Field
func (c *Confirm) WithHeight(height int) Field
func (c *Confirm) WithKeyMap(k *KeyMap) Field
func (c *Confirm) WithPosition(p FieldPosition) Field
func (c *Confirm) WithTheme(theme *Theme) Field
func (c *Confirm) WithWidth(width int) Field
func (*Confirm) Zoom() bool
type ConfirmKeyMap struct {
	Next   key.Binding
	Prev   key.Binding
	Toggle key.Binding
	Submit key.Binding
	Accept key.Binding
	Reject key.Binding
}
type EchoMode textinput.EchoMode
const (
	// EchoNormal displays text as is.
	// This is the default behavior.
	EchoModeNormal EchoMode = EchoMode(textinput.EchoNormal)
	// EchoPassword displays the EchoCharacter mask instead of actual characters.
	// This is commonly used for password fields.
	EchoModePassword EchoMode = EchoMode(textinput.EchoPassword)
	// EchoNone displays nothing as characters are entered.
	// This is commonly seen for password fields on the command line.
	EchoModeNone EchoMode = EchoMode(textinput.EchoNone)
)
type EmbeddedAccessor[T any] struct {
	// Has unexported fields.
}
func (a *EmbeddedAccessor[T]) Get() T
func (a *EmbeddedAccessor[T]) Set(value T)
type Eval[T any] struct {
	// Has unexported fields.
}
type Field interface {
	// Bubble Tea Model
	Init() tea.Cmd
	Update(tea.Msg) (tea.Model, tea.Cmd)
	View() string
	// Bubble Tea Events
	Blur() tea.Cmd
	Focus() tea.Cmd
	// Errors and Validation
	Error() error
	// Run runs the field individually.
	Run() error
	// Skip returns whether this input should be skipped or not.
	Skip() bool
	// Zoom returns whether this input should be zoomed or not.
	// Zoom allows the field to take focus of the group / form height.
	Zoom() bool
	// KeyBinds returns help keybindings.
	KeyBinds() []key.Binding
	// WithTheme sets the theme on a field.
	WithTheme(*Theme) Field
	// WithAccessible sets whether the field should run in accessible mode.
	WithAccessible(bool) Field
	// WithKeyMap sets the keymap on a field.
	WithKeyMap(*KeyMap) Field
	// WithWidth sets the width of a field.
	WithWidth(int) Field
	// WithHeight sets the height of a field.
	WithHeight(int) Field
	// WithPosition tells the field the index of the group and position it is in.
	WithPosition(FieldPosition) Field
	// GetKey returns the field's key.
	GetKey() string
	// GetValue returns the field's value.
	GetValue() any
}
type FieldPosition struct {
	Group      int
	Field      int
	FirstField int
	LastField  int
	GroupCount int
	FirstGroup int
	LastGroup  int
}
func (p FieldPosition) IsFirst() bool
func (p FieldPosition) IsLast() bool
type FieldStyles struct {
	Base           lipgloss.Style
	Title          lipgloss.Style
	Description    lipgloss.Style
	ErrorIndicator lipgloss.Style
	ErrorMessage   lipgloss.Style
	// Select styles.
	SelectSelector lipgloss.Style // Selection indicator
	Option         lipgloss.Style // Select options
	NextIndicator  lipgloss.Style
	PrevIndicator  lipgloss.Style
	// FilePicker styles.
	Directory lipgloss.Style
	File      lipgloss.Style
	// Multi-select styles.
	MultiSelectSelector lipgloss.Style
	SelectedOption      lipgloss.Style
	SelectedPrefix      lipgloss.Style
	UnselectedOption    lipgloss.Style
	UnselectedPrefix    lipgloss.Style
	// Textinput and teatarea styles.
	TextInput TextInputStyles
	// Confirm styles.
	FocusedButton lipgloss.Style
	BlurredButton lipgloss.Style
	// Card styles.
	Card      lipgloss.Style
	NoteTitle lipgloss.Style
	Next      lipgloss.Style
}
type FilePicker struct {
	// Has unexported fields.
}
func NewFilePicker() *FilePicker
func (f *FilePicker) Accessor(accessor Accessor[string]) *FilePicker
func (f *FilePicker) AllowedTypes(types []string) *FilePicker
func (f *FilePicker) Blur() tea.Cmd
func (f *FilePicker) CurrentDirectory(directory string) *FilePicker
func (f *FilePicker) Description(description string) *FilePicker
func (f *FilePicker) DirAllowed(v bool) *FilePicker
func (f *FilePicker) Error() error
func (f *FilePicker) FileAllowed(v bool) *FilePicker
func (f *FilePicker) Focus() tea.Cmd
func (f *FilePicker) GetKey() string
func (f *FilePicker) GetValue() any
func (f *FilePicker) Height(height int) *FilePicker
func (f *FilePicker) Init() tea.Cmd
func (f *FilePicker) Key(key string) *FilePicker
func (f *FilePicker) KeyBinds() []key.Binding
func (f *FilePicker) Picking(v bool) *FilePicker
func (f *FilePicker) Run() error
func (f *FilePicker) ShowHidden(v bool) *FilePicker
func (f *FilePicker) ShowPermissions(v bool) *FilePicker
func (f *FilePicker) ShowSize(v bool) *FilePicker
func (*FilePicker) Skip() bool
func (f *FilePicker) Title(title string) *FilePicker
func (f *FilePicker) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (f *FilePicker) Validate(validate func(string) error) *FilePicker
func (f *FilePicker) Value(value *string) *FilePicker
func (f *FilePicker) View() string
func (f *FilePicker) WithAccessible(accessible bool) Field
func (f *FilePicker) WithHeight(height int) Field
func (f *FilePicker) WithKeyMap(k *KeyMap) Field
func (f *FilePicker) WithPosition(p FieldPosition) Field
func (f *FilePicker) WithTheme(theme *Theme) Field
func (f *FilePicker) WithWidth(width int) Field
func (f *FilePicker) Zoom() bool
type FilePickerKeyMap struct {
	Open     key.Binding
	Close    key.Binding
	GoToTop  key.Binding
	GoToLast key.Binding
	PageUp   key.Binding
	PageDown key.Binding
	Back     key.Binding
	Select   key.Binding
	Up       key.Binding
	Down     key.Binding
	Prev     key.Binding
	Next     key.Binding
	Submit   key.Binding
}
type Form struct {
	// callbacks
	SubmitCmd tea.Cmd
	CancelCmd tea.Cmd
	State FormState
	// Has unexported fields.
}
func NewForm(groups ...*Group) *Form
func (f *Form) Errors() []error
func (f *Form) Get(key string) any
func (f *Form) GetBool(key string) bool
func (f *Form) GetInt(key string) int
func (f *Form) GetString(key string) string
func (f *Form) Help() help.Model
func (f *Form) Init() tea.Cmd
func (f *Form) KeyBinds() []key.Binding
func (f *Form) NextField() tea.Cmd
func (f *Form) NextGroup() tea.Cmd
func (f *Form) PrevField() tea.Cmd
func (f *Form) PrevGroup() tea.Cmd
func (f *Form) Run() error
func (f *Form) RunWithContext(ctx context.Context) error
func (f *Form) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (f *Form) UpdateFieldPositions() *Form
func (f *Form) View() string
func (f *Form) WithAccessible(accessible bool) *Form
func (f *Form) WithHeight(height int) *Form
func (f *Form) WithInput(r io.Reader) *Form
func (f *Form) WithKeyMap(keymap *KeyMap) *Form
func (f *Form) WithLayout(layout Layout) *Form
func (f *Form) WithOutput(w io.Writer) *Form
func (f *Form) WithProgramOptions(opts ...tea.ProgramOption) *Form
func (f *Form) WithShowErrors(v bool) *Form
func (f *Form) WithShowHelp(v bool) *Form
func (f *Form) WithTheme(theme *Theme) *Form
func (f *Form) WithTimeout(t time.Duration) *Form
func (f *Form) WithWidth(width int) *Form
type FormState int
const (
	// StateNormal is when the user is completing the form.
	StateNormal FormState = iota
	// StateCompleted is when the user has completed the form.
	StateCompleted
	// StateAborted is when the user has aborted the form.
	StateAborted
)
type Group struct {
	// Has unexported fields.
}
func NewGroup(fields ...Field) *Group
func (g *Group) Content() string
func (g *Group) Description(description string) *Group
func (g *Group) Errors() []error
func (g *Group) Footer() string
func (g *Group) Init() tea.Cmd
func (g *Group) Title(title string) *Group
func (g *Group) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (g *Group) View() string
func (g *Group) WithHeight(height int) *Group
func (g *Group) WithHide(hide bool) *Group
func (g *Group) WithHideFunc(hideFunc func() bool) *Group
func (g *Group) WithKeyMap(k *KeyMap) *Group
func (g *Group) WithShowErrors(show bool) *Group
func (g *Group) WithShowHelp(show bool) *Group
func (g *Group) WithTheme(t *Theme) *Group
func (g *Group) WithWidth(width int) *Group
type Input struct {
	// Has unexported fields.
}
func NewInput() *Input
func (i *Input) Accessor(accessor Accessor[string]) *Input
func (i *Input) Blur() tea.Cmd
func (i *Input) CharLimit(charlimit int) *Input
func (i *Input) Description(description string) *Input
func (i *Input) DescriptionFunc(f func() string, bindings any) *Input
func (i *Input) EchoMode(mode EchoMode) *Input
func (i *Input) Error() error
func (i *Input) Focus() tea.Cmd
func (i *Input) GetKey() string
func (i *Input) GetValue() any
func (i *Input) Init() tea.Cmd
func (i *Input) Inline(inline bool) *Input
func (i *Input) Key(key string) *Input
func (i *Input) KeyBinds() []key.Binding
func (i *Input) Password(password bool) *Input
func (i *Input) Placeholder(str string) *Input
func (i *Input) PlaceholderFunc(f func() string, bindings any) *Input
func (i *Input) Prompt(prompt string) *Input
func (i *Input) Run() error
func (*Input) Skip() bool
func (i *Input) Suggestions(suggestions []string) *Input
func (i *Input) SuggestionsFunc(f func() []string, bindings any) *Input
func (i *Input) Title(title string) *Input
func (i *Input) TitleFunc(f func() string, bindings any) *Input
func (i *Input) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (i *Input) Validate(validate func(string) error) *Input
func (i *Input) Value(value *string) *Input
func (i *Input) View() string
func (i *Input) WithAccessible(accessible bool) Field
func (i *Input) WithHeight(height int) Field
func (i *Input) WithKeyMap(k *KeyMap) Field
func (i *Input) WithPosition(p FieldPosition) Field
func (i *Input) WithTheme(theme *Theme) Field
func (i *Input) WithWidth(width int) Field
func (*Input) Zoom() bool
type InputKeyMap struct {
	AcceptSuggestion key.Binding
	Next             key.Binding
	Prev             key.Binding
	Submit           key.Binding
}
type KeyMap struct {
	Quit key.Binding
	Confirm     ConfirmKeyMap
	FilePicker  FilePickerKeyMap
	Input       InputKeyMap
	MultiSelect MultiSelectKeyMap
	Note        NoteKeyMap
	Select      SelectKeyMap
	Text        TextKeyMap
}
func NewDefaultKeyMap() *KeyMap
type Layout interface {
	View(f *Form) string
	GroupWidth(f *Form, g *Group, w int) int
}
var LayoutDefault Layout = &layoutDefault{}
var LayoutStack Layout = &layoutStack{}
func LayoutColumns(columns int) Layout
func LayoutGrid(rows int, columns int) Layout
type MultiSelect[T comparable] struct {
	// Has unexported fields.
}
func NewMultiSelect[T comparable]() *MultiSelect[T]
func (m *MultiSelect[T]) Accessor(accessor Accessor[[]T]) *MultiSelect[T]
func (m *MultiSelect[T]) Blur() tea.Cmd
func (m *MultiSelect[T]) Description(description string) *MultiSelect[T]
func (m *MultiSelect[T]) DescriptionFunc(f func() string, bindings any) *MultiSelect[T]
func (m *MultiSelect[T]) Error() error
func (m *MultiSelect[T]) Filterable(filterable bool) *MultiSelect[T]
func (m *MultiSelect[T]) Filtering(filtering bool) *MultiSelect[T]
func (m *MultiSelect[T]) Focus() tea.Cmd
func (m *MultiSelect[T]) GetKey() string
func (m *MultiSelect[T]) GetValue() any
func (m *MultiSelect[T]) Height(height int) *MultiSelect[T]
func (m *MultiSelect[T]) Init() tea.Cmd
func (m *MultiSelect[T]) Key(key string) *MultiSelect[T]
func (m *MultiSelect[T]) KeyBinds() []key.Binding
func (m *MultiSelect[T]) Limit(limit int) *MultiSelect[T]
func (m *MultiSelect[T]) Options(options ...Option[T]) *MultiSelect[T]
func (m *MultiSelect[T]) OptionsFunc(f func() []Option[T], bindings any) *MultiSelect[T]
func (m *MultiSelect[T]) Run() error
func (*MultiSelect[T]) Skip() bool
func (m *MultiSelect[T]) Title(title string) *MultiSelect[T]
func (m *MultiSelect[T]) TitleFunc(f func() string, bindings any) *MultiSelect[T]
func (m *MultiSelect[T]) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (m *MultiSelect[T]) Validate(validate func([]T) error) *MultiSelect[T]
func (m *MultiSelect[T]) Value(value *[]T) *MultiSelect[T]
func (m *MultiSelect[T]) View() string
func (m *MultiSelect[T]) WithAccessible(accessible bool) Field
func (m *MultiSelect[T]) WithHeight(height int) Field
func (m *MultiSelect[T]) WithKeyMap(k *KeyMap) Field
func (m *MultiSelect[T]) WithPosition(p FieldPosition) Field
func (m *MultiSelect[T]) WithTheme(theme *Theme) Field
func (m *MultiSelect[T]) WithWidth(width int) Field
func (*MultiSelect[T]) Zoom() bool
type MultiSelectKeyMap struct {
	Next         key.Binding
	Prev         key.Binding
	Up           key.Binding
	Down         key.Binding
	HalfPageUp   key.Binding
	HalfPageDown key.Binding
	GotoTop      key.Binding
	GotoBottom   key.Binding
	Toggle       key.Binding
	Filter       key.Binding
	SetFilter    key.Binding
	ClearFilter  key.Binding
	Submit       key.Binding
	SelectAll    key.Binding
	SelectNone   key.Binding
}
type Note struct {
	// Has unexported fields.
}
func NewNote() *Note
func (n *Note) Blur() tea.Cmd
func (n *Note) Description(description string) *Note
func (n *Note) DescriptionFunc(f func() string, bindings any) *Note
func (n *Note) Error() error
func (n *Note) Focus() tea.Cmd
func (n *Note) GetKey() string
func (n *Note) GetValue() any
func (n *Note) Height(height int) *Note
func (n *Note) Init() tea.Cmd
func (n *Note) KeyBinds() []key.Binding
func (n *Note) Next(show bool) *Note
func (n *Note) NextLabel(label string) *Note
func (n *Note) Run() error
func (n *Note) Skip() bool
func (n *Note) Title(title string) *Note
func (n *Note) TitleFunc(f func() string, bindings any) *Note
func (n *Note) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (n *Note) View() string
func (n *Note) WithAccessible(accessible bool) Field
func (n *Note) WithHeight(height int) Field
func (n *Note) WithKeyMap(k *KeyMap) Field
func (n *Note) WithPosition(p FieldPosition) Field
func (n *Note) WithTheme(theme *Theme) Field
func (n *Note) WithWidth(width int) Field
func (n *Note) Zoom() bool
type NoteKeyMap struct {
	Next   key.Binding
	Prev   key.Binding
	Submit key.Binding
}
type Option[T comparable] struct {
	Key   string
	Value T
	// Has unexported fields.
}
func NewOption[T comparable](key string, value T) Option[T]
func NewOptions[T comparable](values ...T) []Option[T]
func (o Option[T]) Selected(selected bool) Option[T]
func (o Option[T]) String() string
type PointerAccessor[T any] struct {
	// Has unexported fields.
}
func NewPointerAccessor[T any](value *T) *PointerAccessor[T]
func (a *PointerAccessor[T]) Get() T
func (a *PointerAccessor[T]) Set(value T)
type Select[T comparable] struct {
	// Has unexported fields.
}
func NewSelect[T comparable]() *Select[T]
func (s *Select[T]) Accessor(accessor Accessor[T]) *Select[T]
func (s *Select[T]) Blur() tea.Cmd
func (s *Select[T]) Description(description string) *Select[T]
func (s *Select[T]) DescriptionFunc(f func() string, bindings any) *Select[T]
func (s *Select[T]) Error() error
func (s *Select[T]) Filtering(filtering bool) *Select[T]
func (s *Select[T]) Focus() tea.Cmd
func (s *Select[T]) GetKey() string
func (s *Select[T]) GetValue() any
func (s *Select[T]) Height(height int) *Select[T]
func (s *Select[T]) Init() tea.Cmd
func (s *Select[T]) Inline(v bool) *Select[T]
func (s *Select[T]) Key(key string) *Select[T]
func (s *Select[T]) KeyBinds() []key.Binding
func (s *Select[T]) Options(options ...Option[T]) *Select[T]
func (s *Select[T]) OptionsFunc(f func() []Option[T], bindings any) *Select[T]
func (s *Select[T]) Run() error
func (*Select[T]) Skip() bool
func (s *Select[T]) Title(title string) *Select[T]
func (s *Select[T]) TitleFunc(f func() string, bindings any) *Select[T]
func (s *Select[T]) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (s *Select[T]) Validate(validate func(T) error) *Select[T]
func (s *Select[T]) Value(value *T) *Select[T]
func (s *Select[T]) View() string
func (s *Select[T]) WithAccessible(accessible bool) Field
func (s *Select[T]) WithHeight(height int) Field
func (s *Select[T]) WithKeyMap(k *KeyMap) Field
func (s *Select[T]) WithPosition(p FieldPosition) Field
func (s *Select[T]) WithTheme(theme *Theme) Field
func (s *Select[T]) WithWidth(width int) Field
func (*Select[T]) Zoom() bool
type SelectKeyMap struct {
	Next         key.Binding
	Prev         key.Binding
	Up           key.Binding
	Down         key.Binding
	HalfPageUp   key.Binding
	HalfPageDown key.Binding
	GotoTop      key.Binding
	GotoBottom   key.Binding
	Left         key.Binding
	Right        key.Binding
	Filter       key.Binding
	SetFilter    key.Binding
	ClearFilter  key.Binding
	Submit       key.Binding
}
type Text struct {
	// Has unexported fields.
}
func NewText() *Text
func (t *Text) Accessor(accessor Accessor[string]) *Text
func (t *Text) Blur() tea.Cmd
func (t *Text) CharLimit(charlimit int) *Text
func (t *Text) Description(description string) *Text
func (t *Text) DescriptionFunc(f func() string, bindings any) *Text
func (t *Text) Editor(editor ...string) *Text
func (t *Text) EditorExtension(extension string) *Text
func (t *Text) Error() error
func (t *Text) Focus() tea.Cmd
func (t *Text) GetKey() string
func (t *Text) GetValue() any
func (t *Text) Init() tea.Cmd
func (t *Text) Key(key string) *Text
func (t *Text) KeyBinds() []key.Binding
func (t *Text) Lines(lines int) *Text
func (t *Text) Placeholder(str string) *Text
func (t *Text) PlaceholderFunc(f func() string, bindings any) *Text
func (t *Text) Run() error
func (t *Text) ShowLineNumbers(show bool) *Text
func (*Text) Skip() bool
func (t *Text) Title(title string) *Text
func (t *Text) TitleFunc(f func() string, bindings any) *Text
func (t *Text) Update(msg tea.Msg) (tea.Model, tea.Cmd)
func (t *Text) Validate(validate func(string) error) *Text
func (t *Text) Value(value *string) *Text
func (t *Text) View() string
func (t *Text) WithAccessible(accessible bool) Field
func (t *Text) WithHeight(height int) Field
func (t *Text) WithKeyMap(k *KeyMap) Field
func (t *Text) WithPosition(p FieldPosition) Field
func (t *Text) WithTheme(theme *Theme) Field
func (t *Text) WithWidth(width int) Field
func (*Text) Zoom() bool
type TextInputStyles struct {
	Cursor      lipgloss.Style
	CursorText  lipgloss.Style
	Placeholder lipgloss.Style
	Prompt      lipgloss.Style
	Text        lipgloss.Style
}
type TextKeyMap struct {
	Next    key.Binding
	Prev    key.Binding
	NewLine key.Binding
	Editor  key.Binding
	Submit  key.Binding
}
type Theme struct {
	Form           lipgloss.Style
	Group          lipgloss.Style
	FieldSeparator lipgloss.Style
	Blurred        FieldStyles
	Focused        FieldStyles
	Help           help.Styles
}
func ThemeBase() *Theme
func ThemeBase16() *Theme
func ThemeCatppuccin() *Theme
func ThemeCharm() *Theme
