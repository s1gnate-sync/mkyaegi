type ActionNode struct {
	NodeType
	Pos
	Line int       // The line number in the input. Deprecated: Kept for compatibility.
	Pipe *PipeNode // The pipeline in the action.
	// Has unexported fields.
}
func (a *ActionNode) Copy() Node
func (a *ActionNode) String() string
type BoolNode struct {
	NodeType
	Pos
	True bool // The value of the boolean constant.
	// Has unexported fields.
}
func (b *BoolNode) Copy() Node
func (b *BoolNode) String() string
type BranchNode struct {
	NodeType
	Pos
	Line     int       // The line number in the input. Deprecated: Kept for compatibility.
	Pipe     *PipeNode // The pipeline to be evaluated.
	List     *ListNode // What to execute if the value is non-empty.
	ElseList *ListNode // What to execute if the value is empty (nil if absent).
	// Has unexported fields.
}
func (b *BranchNode) Copy() Node
func (b *BranchNode) String() string
type BreakNode struct {
	NodeType
	Pos
	Line int
	// Has unexported fields.
}
func (b *BreakNode) Copy() Node
func (b *BreakNode) String() string
type ChainNode struct {
	NodeType
	Pos
	Node  Node
	Field []string // The identifiers in lexical order.
	// Has unexported fields.
}
func (c *ChainNode) Add(field string)
func (c *ChainNode) Copy() Node
func (c *ChainNode) String() string
type CommandNode struct {
	NodeType
	Pos
	Args []Node // Arguments in lexical order: Identifier, field, or constant.
	// Has unexported fields.
}
func (c *CommandNode) Copy() Node
func (c *CommandNode) String() string
type CommentNode struct {
	NodeType
	Pos
	Text string // Comment text.
	// Has unexported fields.
}
func (c *CommentNode) Copy() Node
func (c *CommentNode) String() string
type ContinueNode struct {
	NodeType
	Pos
	Line int
	// Has unexported fields.
}
func (c *ContinueNode) Copy() Node
func (c *ContinueNode) String() string
type DotNode struct {
	NodeType
	Pos
	// Has unexported fields.
}
func (d *DotNode) Copy() Node
func (d *DotNode) String() string
func (d *DotNode) Type() NodeType
type FieldNode struct {
	NodeType
	Pos
	Ident []string // The identifiers in lexical order.
	// Has unexported fields.
}
func (f *FieldNode) Copy() Node
func (f *FieldNode) String() string
type IdentifierNode struct {
	NodeType
	Pos
	Ident string // The identifier's name.
	// Has unexported fields.
}
func NewIdentifier(ident string) *IdentifierNode
func (i *IdentifierNode) Copy() Node
func (i *IdentifierNode) SetPos(pos Pos) *IdentifierNode
func (i *IdentifierNode) SetTree(t *Tree) *IdentifierNode
func (i *IdentifierNode) String() string
type IfNode struct {
	BranchNode
}
func (i *IfNode) Copy() Node
type ListNode struct {
	NodeType
	Pos
	Nodes []Node // The element nodes in lexical order.
	// Has unexported fields.
}
func (l *ListNode) Copy() Node
func (l *ListNode) CopyList() *ListNode
func (l *ListNode) String() string
type Mode uint
const (
	ParseComments Mode = 1 << iota // parse comments and add them to AST
	SkipFuncCheck                  // do not check that functions are defined
)
type NilNode struct {
	NodeType
	Pos
	// Has unexported fields.
}
func (n *NilNode) Copy() Node
func (n *NilNode) String() string
func (n *NilNode) Type() NodeType
type Node interface {
	Type() NodeType
	String() string
	// Copy does a deep copy of the Node and all its components.
	// To avoid type assertions, some XxxNodes also have specialized
	// CopyXxx methods that return *XxxNode.
	Copy() Node
	Position() Pos // byte position of start of node in full original input string
	// Has unexported methods.
}
type NodeType int
const (
	NodeText    NodeType = iota // Plain text.
	NodeAction                  // A non-control action such as a field evaluation.
	NodeBool                    // A boolean constant.
	NodeChain                   // A sequence of field accesses.
	NodeCommand                 // An element of a pipeline.
	NodeDot                     // The cursor, dot.
	NodeField      // A field or method name.
	NodeIdentifier // An identifier; always a function name.
	NodeIf         // An if action.
	NodeList       // A list of Nodes.
	NodeNil        // An untyped nil constant.
	NodeNumber     // A numerical constant.
	NodePipe       // A pipeline of commands.
	NodeRange      // A range action.
	NodeString     // A string constant.
	NodeTemplate   // A template invocation action.
	NodeVariable   // A $ variable.
	NodeWith       // A with action.
	NodeComment    // A comment.
	NodeBreak      // A break action.
	NodeContinue   // A continue action.
)
func (t NodeType) Type() NodeType
type NumberNode struct {
	NodeType
	Pos
	IsInt      bool       // Number has an integral value.
	IsUint     bool       // Number has an unsigned integral value.
	IsFloat    bool       // Number has a floating-point value.
	IsComplex  bool       // Number is complex.
	Int64      int64      // The signed integer value.
	Uint64     uint64     // The unsigned integer value.
	Float64    float64    // The floating-point value.
	Complex128 complex128 // The complex value.
	Text       string     // The original textual representation from the input.
	// Has unexported fields.
}
func (n *NumberNode) Copy() Node
func (n *NumberNode) String() string
type PipeNode struct {
	NodeType
	Pos
	Line     int             // The line number in the input. Deprecated: Kept for compatibility.
	IsAssign bool            // The variables are being assigned, not declared.
	Decl     []*VariableNode // Variables in lexical order.
	Cmds     []*CommandNode  // The commands in lexical order.
	// Has unexported fields.
}
func (p *PipeNode) Copy() Node
func (p *PipeNode) CopyPipe() *PipeNode
func (p *PipeNode) String() string
type Pos int
func (p Pos) Position() Pos
type RangeNode struct {
	BranchNode
}
func (r *RangeNode) Copy() Node
type StringNode struct {
	NodeType
	Pos
	Quoted string // The original text of the string, with quotes.
	Text   string // The string, after quote processing.
	// Has unexported fields.
}
func (s *StringNode) Copy() Node
func (s *StringNode) String() string
type TemplateNode struct {
	NodeType
	Pos
	Line int       // The line number in the input. Deprecated: Kept for compatibility.
	Name string    // The name of the template (unquoted).
	Pipe *PipeNode // The command to evaluate as dot for the template.
	// Has unexported fields.
}
func (t *TemplateNode) Copy() Node
func (t *TemplateNode) String() string
type TextNode struct {
	NodeType
	Pos
	Text []byte // The text; may span newlines.
	// Has unexported fields.
}
func (t *TextNode) Copy() Node
func (t *TextNode) String() string
type Tree struct {
	Name      string    // name of the template represented by the tree.
	ParseName string    // name of the top-level template during parsing, for error messages.
	Root      *ListNode // top-level root of the tree.
	Mode      Mode      // parsing mode.
	// Has unexported fields.
}
func New(name string, funcs ...map[string]any) *Tree
func (t *Tree) Copy() *Tree
func (t *Tree) ErrorContext(n Node) (location, context string)
func (t *Tree) Parse(text, leftDelim, rightDelim string, treeSet map[string]*Tree, funcs ...map[string]any) (tree *Tree, err error)
type VariableNode struct {
	NodeType
	Pos
	Ident []string // Variable name and fields in lexical order.
	// Has unexported fields.
}
func (v *VariableNode) Copy() Node
func (v *VariableNode) String() string
type WithNode struct {
	BranchNode
}
