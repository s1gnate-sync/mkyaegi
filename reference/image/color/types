type Alpha struct {
	A uint8
}
func (c Alpha) RGBA() (r, g, b, a uint32)
type Alpha16 struct {
	A uint16
}
func (c Alpha16) RGBA() (r, g, b, a uint32)
type CMYK struct {
	C, M, Y, K uint8
}
func (c CMYK) RGBA() (uint32, uint32, uint32, uint32)
type Color interface {
	// RGBA returns the alpha-premultiplied red, green, blue and alpha values
	// for the color. Each value ranges within [0, 0xffff], but is represented
	// by a uint32 so that multiplying by a blend factor up to 0xffff will not
	// overflow.
	//
	// An alpha-premultiplied color component c has been scaled by alpha (a),
	// so has valid values 0 <= c <= a.
	RGBA() (r, g, b, a uint32)
}
type Gray struct {
	Y uint8
}
func (c Gray) RGBA() (r, g, b, a uint32)
type Gray16 struct {
	Y uint16
}
func (c Gray16) RGBA() (r, g, b, a uint32)
type Model interface {
	Convert(c Color) Color
}
var (
	RGBAModel    Model = ModelFunc(rgbaModel)
	RGBA64Model  Model = ModelFunc(rgba64Model)
	NRGBAModel   Model = ModelFunc(nrgbaModel)
	NRGBA64Model Model = ModelFunc(nrgba64Model)
	AlphaModel   Model = ModelFunc(alphaModel)
	Alpha16Model Model = ModelFunc(alpha16Model)
	GrayModel    Model = ModelFunc(grayModel)
	Gray16Model  Model = ModelFunc(gray16Model)
)
var CMYKModel Model = ModelFunc(cmykModel)
var NYCbCrAModel Model = ModelFunc(nYCbCrAModel)
var YCbCrModel Model = ModelFunc(yCbCrModel)
func ModelFunc(f func(Color) Color) Model
type NRGBA struct {
	R, G, B, A uint8
}
func (c NRGBA) RGBA() (r, g, b, a uint32)
type NRGBA64 struct {
	R, G, B, A uint16
}
func (c NRGBA64) RGBA() (r, g, b, a uint32)
type NYCbCrA struct {
	YCbCr
	A uint8
}
func (c NYCbCrA) RGBA() (uint32, uint32, uint32, uint32)
type Palette []Color
func (p Palette) Convert(c Color) Color
func (p Palette) Index(c Color) int
type RGBA struct {
	R, G, B, A uint8
}
func (c RGBA) RGBA() (r, g, b, a uint32)
type RGBA64 struct {
	R, G, B, A uint16
}
func (c RGBA64) RGBA() (r, g, b, a uint32)
type YCbCr struct {
	Y, Cb, Cr uint8
}
