type Compressor func(w io.Writer) (io.WriteCloser, error)
type Decompressor func(r io.Reader) io.ReadCloser
type File struct {
	FileHeader
	// Has unexported fields.
}
func (f *File) DataOffset() (offset int64, err error)
func (f *File) Open() (io.ReadCloser, error)
func (f *File) OpenRaw() (io.Reader, error)
type FileHeader struct {
	// Name is the name of the file.
	//
	// It must be a relative path, not start with a drive letter (such as "C:"),
	// and must use forward slashes instead of back slashes. A trailing slash
	// indicates that this file is a directory and should have no data.
	Name string
	// Comment is any arbitrary user-defined string shorter than 64KiB.
	Comment string
	// NonUTF8 indicates that Name and Comment are not encoded in UTF-8.
	//
	// By specification, the only other encoding permitted should be CP-437,
	// but historically many ZIP readers interpret Name and Comment as whatever
	// the system's local character encoding happens to be.
	//
	// This flag should only be set if the user intends to encode a non-portable
	// ZIP file for a specific localized region. Otherwise, the Writer
	// automatically sets the ZIP format's UTF-8 flag for valid UTF-8 strings.
	NonUTF8 bool
	CreatorVersion uint16
	ReaderVersion  uint16
	Flags          uint16
	// Method is the compression method. If zero, Store is used.
	Method uint16
	// Modified is the modified time of the file.
	//
	// When reading, an extended timestamp is preferred over the legacy MS-DOS
	// date field, and the offset between the times is used as the timezone.
	// If only the MS-DOS date is present, the timezone is assumed to be UTC.
	//
	// When writing, an extended timestamp (which is timezone-agnostic) is
	// always emitted. The legacy MS-DOS date field is encoded according to the
	// location of the Modified time.
	Modified time.Time
	// ModifiedTime is an MS-DOS-encoded time.
	//
	// Deprecated: Use Modified instead.
	ModifiedTime uint16
	// ModifiedDate is an MS-DOS-encoded date.
	//
	// Deprecated: Use Modified instead.
	ModifiedDate uint16
	// CRC32 is the CRC32 checksum of the file content.
	CRC32 uint32
	// CompressedSize is the compressed size of the file in bytes.
	// If either the uncompressed or compressed size of the file
	// does not fit in 32 bits, CompressedSize is set to ^uint32(0).
	//
	// Deprecated: Use CompressedSize64 instead.
	CompressedSize uint32
	// UncompressedSize is the uncompressed size of the file in bytes.
	// If either the uncompressed or compressed size of the file
	// does not fit in 32 bits, UncompressedSize is set to ^uint32(0).
	//
	// Deprecated: Use UncompressedSize64 instead.
	UncompressedSize uint32
	// CompressedSize64 is the compressed size of the file in bytes.
	CompressedSize64 uint64
	// UncompressedSize64 is the uncompressed size of the file in bytes.
	UncompressedSize64 uint64
	Extra         []byte
	ExternalAttrs uint32 // Meaning depends on CreatorVersion
}
[ZIP specification]: https://support.pkware.com/pkzip/appnote
func FileInfoHeader(fi fs.FileInfo) (*FileHeader, error)
func (h *FileHeader) FileInfo() fs.FileInfo
func (h *FileHeader) ModTime() time.Time
func (h *FileHeader) Mode() (mode fs.FileMode)
func (h *FileHeader) SetModTime(t time.Time)
func (h *FileHeader) SetMode(mode fs.FileMode)
type ReadCloser struct {
	Reader
	// Has unexported fields.
}
func OpenReader(name string) (*ReadCloser, error)
func (rc *ReadCloser) Close() error
type Reader struct {
	File    []*File
	Comment string
	// Has unexported fields.
}
func NewReader(r io.ReaderAt, size int64) (*Reader, error)
func (r *Reader) Open(name string) (fs.File, error)
func (r *Reader) RegisterDecompressor(method uint16, dcomp Decompressor)
type Writer struct {
	// Has unexported fields.
}
func NewWriter(w io.Writer) *Writer
func (w *Writer) AddFS(fsys fs.FS) error
func (w *Writer) Close() error
func (w *Writer) Copy(f *File) error
func (w *Writer) Create(name string) (io.Writer, error)
func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error)
func (w *Writer) CreateRaw(fh *FileHeader) (io.Writer, error)
func (w *Writer) Flush() error
func (w *Writer) RegisterCompressor(method uint16, comp Compressor)
func (w *Writer) SetComment(comment string) error
