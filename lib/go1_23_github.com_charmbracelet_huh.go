// Code generated by 'yaegi extract github.com/charmbracelet/huh'. DO NOT EDIT.

package lib

import (
	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/huh"
	"reflect"
)

func init() {
	Symbols["github.com/charmbracelet/huh/huh"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"EchoModeNone":          reflect.ValueOf(huh.EchoModeNone),
		"EchoModeNormal":        reflect.ValueOf(huh.EchoModeNormal),
		"EchoModePassword":      reflect.ValueOf(huh.EchoModePassword),
		"ErrTimeout":            reflect.ValueOf(&huh.ErrTimeout).Elem(),
		"ErrTimeoutUnsupported": reflect.ValueOf(&huh.ErrTimeoutUnsupported).Elem(),
		"ErrUserAborted":        reflect.ValueOf(&huh.ErrUserAborted).Elem(),
		"LayoutColumns":         reflect.ValueOf(huh.LayoutColumns),
		"LayoutDefault":         reflect.ValueOf(&huh.LayoutDefault).Elem(),
		"LayoutGrid":            reflect.ValueOf(huh.LayoutGrid),
		"LayoutStack":           reflect.ValueOf(&huh.LayoutStack).Elem(),
		"NewConfirm":            reflect.ValueOf(huh.NewConfirm),
		"NewDefaultKeyMap":      reflect.ValueOf(huh.NewDefaultKeyMap),
		"NewFilePicker":         reflect.ValueOf(huh.NewFilePicker),
		"NewForm":               reflect.ValueOf(huh.NewForm),
		"NewGroup":              reflect.ValueOf(huh.NewGroup),
		"NewInput":              reflect.ValueOf(huh.NewInput),
		"NewNote":               reflect.ValueOf(huh.NewNote),
		"NewText":               reflect.ValueOf(huh.NewText),
		"NextField":             reflect.ValueOf(huh.NextField),
		"PrevField":             reflect.ValueOf(huh.PrevField),
		"Run":                   reflect.ValueOf(huh.Run),
		"StateAborted":          reflect.ValueOf(huh.StateAborted),
		"StateCompleted":        reflect.ValueOf(huh.StateCompleted),
		"StateNormal":           reflect.ValueOf(huh.StateNormal),
		"ThemeBase":             reflect.ValueOf(huh.ThemeBase),
		"ThemeBase16":           reflect.ValueOf(huh.ThemeBase16),
		"ThemeCatppuccin":       reflect.ValueOf(huh.ThemeCatppuccin),
		"ThemeCharm":            reflect.ValueOf(huh.ThemeCharm),
		"ThemeDracula":          reflect.ValueOf(huh.ThemeDracula),
		"ValidateLength":        reflect.ValueOf(huh.ValidateLength),
		"ValidateMaxLength":     reflect.ValueOf(huh.ValidateMaxLength),
		"ValidateMinLength":     reflect.ValueOf(huh.ValidateMinLength),
		"ValidateNotEmpty":      reflect.ValueOf(huh.ValidateNotEmpty),
		"ValidateOneOf":         reflect.ValueOf(huh.ValidateOneOf),

		// type definitions
		"Confirm":           reflect.ValueOf((*huh.Confirm)(nil)),
		"ConfirmKeyMap":     reflect.ValueOf((*huh.ConfirmKeyMap)(nil)),
		"EchoMode":          reflect.ValueOf((*huh.EchoMode)(nil)),
		"Field":             reflect.ValueOf((*huh.Field)(nil)),
		"FieldPosition":     reflect.ValueOf((*huh.FieldPosition)(nil)),
		"FieldStyles":       reflect.ValueOf((*huh.FieldStyles)(nil)),
		"FilePicker":        reflect.ValueOf((*huh.FilePicker)(nil)),
		"FilePickerKeyMap":  reflect.ValueOf((*huh.FilePickerKeyMap)(nil)),
		"Form":              reflect.ValueOf((*huh.Form)(nil)),
		"FormState":         reflect.ValueOf((*huh.FormState)(nil)),
		"Group":             reflect.ValueOf((*huh.Group)(nil)),
		"Input":             reflect.ValueOf((*huh.Input)(nil)),
		"InputKeyMap":       reflect.ValueOf((*huh.InputKeyMap)(nil)),
		"KeyMap":            reflect.ValueOf((*huh.KeyMap)(nil)),
		"Layout":            reflect.ValueOf((*huh.Layout)(nil)),
		"MultiSelectKeyMap": reflect.ValueOf((*huh.MultiSelectKeyMap)(nil)),
		"Note":              reflect.ValueOf((*huh.Note)(nil)),
		"NoteKeyMap":        reflect.ValueOf((*huh.NoteKeyMap)(nil)),
		"SelectKeyMap":      reflect.ValueOf((*huh.SelectKeyMap)(nil)),
		"Text":              reflect.ValueOf((*huh.Text)(nil)),
		"TextInputStyles":   reflect.ValueOf((*huh.TextInputStyles)(nil)),
		"TextKeyMap":        reflect.ValueOf((*huh.TextKeyMap)(nil)),
		"Theme":             reflect.ValueOf((*huh.Theme)(nil)),

		// interface wrapper definitions
		"_Field":  reflect.ValueOf((*_github_com_charmbracelet_huh_Field)(nil)),
		"_Layout": reflect.ValueOf((*_github_com_charmbracelet_huh_Layout)(nil)),
	}
}

// _github_com_charmbracelet_huh_Field is an interface wrapper for Field type
type _github_com_charmbracelet_huh_Field struct {
	IValue          interface{}
	WBlur           func() tea.Cmd
	WError          func() error
	WFocus          func() tea.Cmd
	WGetKey         func() string
	WGetValue       func() any
	WInit           func() tea.Cmd
	WKeyBinds       func() []key.Binding
	WRun            func() error
	WSkip           func() bool
	WUpdate         func(a0 tea.Msg) (tea.Model, tea.Cmd)
	WView           func() string
	WWithAccessible func(a0 bool) huh.Field
	WWithHeight     func(a0 int) huh.Field
	WWithKeyMap     func(a0 *huh.KeyMap) huh.Field
	WWithPosition   func(a0 huh.FieldPosition) huh.Field
	WWithTheme      func(a0 *huh.Theme) huh.Field
	WWithWidth      func(a0 int) huh.Field
	WZoom           func() bool
}

func (W _github_com_charmbracelet_huh_Field) Blur() tea.Cmd {
	return W.WBlur()
}
func (W _github_com_charmbracelet_huh_Field) Error() error {
	return W.WError()
}
func (W _github_com_charmbracelet_huh_Field) Focus() tea.Cmd {
	return W.WFocus()
}
func (W _github_com_charmbracelet_huh_Field) GetKey() string {
	return W.WGetKey()
}
func (W _github_com_charmbracelet_huh_Field) GetValue() any {
	return W.WGetValue()
}
func (W _github_com_charmbracelet_huh_Field) Init() tea.Cmd {
	return W.WInit()
}
func (W _github_com_charmbracelet_huh_Field) KeyBinds() []key.Binding {
	return W.WKeyBinds()
}
func (W _github_com_charmbracelet_huh_Field) Run() error {
	return W.WRun()
}
func (W _github_com_charmbracelet_huh_Field) Skip() bool {
	return W.WSkip()
}
func (W _github_com_charmbracelet_huh_Field) Update(a0 tea.Msg) (tea.Model, tea.Cmd) {
	return W.WUpdate(a0)
}
func (W _github_com_charmbracelet_huh_Field) View() string {
	return W.WView()
}
func (W _github_com_charmbracelet_huh_Field) WithAccessible(a0 bool) huh.Field {
	return W.WWithAccessible(a0)
}
func (W _github_com_charmbracelet_huh_Field) WithHeight(a0 int) huh.Field {
	return W.WWithHeight(a0)
}
func (W _github_com_charmbracelet_huh_Field) WithKeyMap(a0 *huh.KeyMap) huh.Field {
	return W.WWithKeyMap(a0)
}
func (W _github_com_charmbracelet_huh_Field) WithPosition(a0 huh.FieldPosition) huh.Field {
	return W.WWithPosition(a0)
}
func (W _github_com_charmbracelet_huh_Field) WithTheme(a0 *huh.Theme) huh.Field {
	return W.WWithTheme(a0)
}
func (W _github_com_charmbracelet_huh_Field) WithWidth(a0 int) huh.Field {
	return W.WWithWidth(a0)
}
func (W _github_com_charmbracelet_huh_Field) Zoom() bool {
	return W.WZoom()
}

// _github_com_charmbracelet_huh_Layout is an interface wrapper for Layout type
type _github_com_charmbracelet_huh_Layout struct {
	IValue      interface{}
	WGroupWidth func(f *huh.Form, g *huh.Group, w int) int
	WView       func(f *huh.Form) string
}

func (W _github_com_charmbracelet_huh_Layout) GroupWidth(f *huh.Form, g *huh.Group, w int) int {
	return W.WGroupWidth(f, g, w)
}
func (W _github_com_charmbracelet_huh_Layout) View(f *huh.Form) string {
	return W.WView(f)
}
