// Code generated by 'yaegi extract github.com/charmbracelet/lipgloss'. DO NOT EDIT.

package lib

import (
	"github.com/charmbracelet/lipgloss"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/charmbracelet/lipgloss/lipgloss"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BlockBorder":              reflect.ValueOf(lipgloss.BlockBorder),
		"Bottom":                   reflect.ValueOf(lipgloss.Bottom),
		"Center":                   reflect.ValueOf(lipgloss.Center),
		"ColorProfile":             reflect.ValueOf(lipgloss.ColorProfile),
		"DefaultRenderer":          reflect.ValueOf(lipgloss.DefaultRenderer),
		"DoubleBorder":             reflect.ValueOf(lipgloss.DoubleBorder),
		"HasDarkBackground":        reflect.ValueOf(lipgloss.HasDarkBackground),
		"Height":                   reflect.ValueOf(lipgloss.Height),
		"HiddenBorder":             reflect.ValueOf(lipgloss.HiddenBorder),
		"InnerHalfBlockBorder":     reflect.ValueOf(lipgloss.InnerHalfBlockBorder),
		"JoinHorizontal":           reflect.ValueOf(lipgloss.JoinHorizontal),
		"JoinVertical":             reflect.ValueOf(lipgloss.JoinVertical),
		"Left":                     reflect.ValueOf(lipgloss.Left),
		"NewRenderer":              reflect.ValueOf(lipgloss.NewRenderer),
		"NewStyle":                 reflect.ValueOf(lipgloss.NewStyle),
		"NoTabConversion":          reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"NormalBorder":             reflect.ValueOf(lipgloss.NormalBorder),
		"OuterHalfBlockBorder":     reflect.ValueOf(lipgloss.OuterHalfBlockBorder),
		"Place":                    reflect.ValueOf(lipgloss.Place),
		"PlaceHorizontal":          reflect.ValueOf(lipgloss.PlaceHorizontal),
		"PlaceVertical":            reflect.ValueOf(lipgloss.PlaceVertical),
		"Right":                    reflect.ValueOf(lipgloss.Right),
		"RoundedBorder":            reflect.ValueOf(lipgloss.RoundedBorder),
		"SetColorProfile":          reflect.ValueOf(lipgloss.SetColorProfile),
		"SetDefaultRenderer":       reflect.ValueOf(lipgloss.SetDefaultRenderer),
		"SetHasDarkBackground":     reflect.ValueOf(lipgloss.SetHasDarkBackground),
		"Size":                     reflect.ValueOf(lipgloss.Size),
		"StyleRunes":               reflect.ValueOf(lipgloss.StyleRunes),
		"ThickBorder":              reflect.ValueOf(lipgloss.ThickBorder),
		"Top":                      reflect.ValueOf(lipgloss.Top),
		"Width":                    reflect.ValueOf(lipgloss.Width),
		"WithWhitespaceBackground": reflect.ValueOf(lipgloss.WithWhitespaceBackground),
		"WithWhitespaceChars":      reflect.ValueOf(lipgloss.WithWhitespaceChars),
		"WithWhitespaceForeground": reflect.ValueOf(lipgloss.WithWhitespaceForeground),

		// type definitions
		"ANSIColor":             reflect.ValueOf((*lipgloss.ANSIColor)(nil)),
		"AdaptiveColor":         reflect.ValueOf((*lipgloss.AdaptiveColor)(nil)),
		"Border":                reflect.ValueOf((*lipgloss.Border)(nil)),
		"Color":                 reflect.ValueOf((*lipgloss.Color)(nil)),
		"CompleteAdaptiveColor": reflect.ValueOf((*lipgloss.CompleteAdaptiveColor)(nil)),
		"CompleteColor":         reflect.ValueOf((*lipgloss.CompleteColor)(nil)),
		"NoColor":               reflect.ValueOf((*lipgloss.NoColor)(nil)),
		"Position":              reflect.ValueOf((*lipgloss.Position)(nil)),
		"Renderer":              reflect.ValueOf((*lipgloss.Renderer)(nil)),
		"Style":                 reflect.ValueOf((*lipgloss.Style)(nil)),
		"TerminalColor":         reflect.ValueOf((*lipgloss.TerminalColor)(nil)),
		"WhitespaceOption":      reflect.ValueOf((*lipgloss.WhitespaceOption)(nil)),

		// interface wrapper definitions
		"_TerminalColor": reflect.ValueOf((*_github_com_charmbracelet_lipgloss_TerminalColor)(nil)),
	}
}

// _github_com_charmbracelet_lipgloss_TerminalColor is an interface wrapper for TerminalColor type
type _github_com_charmbracelet_lipgloss_TerminalColor struct {
	IValue interface{}
	WRGBA  func() (r uint32, g uint32, b uint32, a uint32)
}

func (W _github_com_charmbracelet_lipgloss_TerminalColor) RGBA() (r uint32, g uint32, b uint32, a uint32) {
	return W.WRGBA()
}
